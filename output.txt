===== src/index.css =====
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  height: 100vh;
  background-color: gray;
}
===== src/App.jsx =====
import React from 'react';
import { useCounterStore } from './store/counterStore';

function App() {
  const count = useCounterStore((state) => state.count);
  const increment = useCounterStore((state) => state.increment);
  const decrement = useCounterStore((state) => state.decrement);

  return (
    <div style={{ textAlign: 'center', marginTop: '50px' }}>
      <h1>Count: {count}</h1>
      <button onClick={increment}>Increment</button>
      <button onClick={decrement}>Decrement</button>
    </div>
  );
}

export default App;
===== src/main.jsx =====
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './logger'; // make sure subscription runs

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
===== src/store/counterStore.js =====
import { create } from 'zustand';

const useCounterStore = create((set) => ({
  count: 0,
  increment: () => set((state) => ({ count: state.count + 1 })),
}));

// 1. One-argument form: runs on any state change
useCounterStore.subscribe((state) => console.log('Store changed:', state));

// 2. Two-argument form: runs only when count changes
useCounterStore.subscribe(
  (state) => state.count,
  (count) => console.log('Count changed:', count),
);

// Trigger change
useCounterStore.getState().increment();
useCounterStore.getState().increment();
===== src/logger.js =====
import { useCounterStore } from './store/counterStore';

// Subscribe to only count changes
const unsubscribe = useCounterStore.subscribe(
  (state) => state.count, // selector: only watch count
  (count) => {
    console.log('Logger: count changed to', count);
  },
);

// Optional: unsubscribe later
// unsubscribe();
